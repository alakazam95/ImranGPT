from aiogram import types
from config import bot, dp
from aiogram import Bot, Dispatcher, types
import markups as nav
from data.creator import dbCreator as Database

modes = ['gpt3.5', 'gpt4', 'midjourney5.2', 'midjourney6']


@dp.callback_query_handler(lambda c: c.data == 'help')
async def process_callback_help(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–ó–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–º–æ—â–∏...")


@dp.callback_query_handler(lambda c: c.data == 'subscribe')
async def process_callback_subscribe(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ...")


# @dp.callback_query_handler(lambda c: c.data == 'myid')
# async def process_callback_subscribe(callback_query: types.CallbackQuery):
#     user_id = message.from_user.id
#     await bot.send_message(callback_query.from_user.id, f"your id is {user_id}")

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ /mode
@dp.callback_query_handler(lambda c: c.data in modes)
async def process_callback_mode_selection(callback_query: types.CallbackQuery):
    podpiska = 0
    selected_mode = callback_query.data
    keyboard = types.InlineKeyboardMarkup()
    buttons = []

    if selected_mode != 'gpt3.5' and not podpiska:
        subscription_message = "GPT-4 –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /pay" if selected_mode == 'gpt4' else "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é MidJourney –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /pay"
        await bot.send_message(callback_query.from_user.id, subscription_message)
    for mode in modes:
        text = f"{'‚úÖ ' if mode == selected_mode and podpiska or mode == 'gpt3.5' else ''}{mode.upper()}"
        callback_data = mode
        buttons.append(types.InlineKeyboardButton(text, callback_data=callback_data))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Ä—è–¥
    keyboard.row(buttons[0], buttons[1])
    keyboard.row(buttons[2], buttons[3])

#
# db = Database("C:\\Users\\job_j\\Documents\\GitHub\\amed\\ImranGPT\\data\\mydatabase.db")
#
#
# @dp.message_handler(commands=['start'])
# async def start(message: types.Message):
#     if not db.user_exists(message.from_user.id):
#         db.add_user(message.from_user.id)
#         await bot.send_message(message.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫")
#     else:
#         await bot.send_message(message.from_user.id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=nav.mainMenu)
#
#
# @dp.message_handler()
# async def bot_message(message: types.Message):
#     if message.chat.type == 'private':
#         if message.text == "ü´Ç –ü–†–û–§–ò–õ–¨":
#             pass  # –¢—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
#         else:
#             if db.get_signup(message.from_user.id) == "setnickname":
#                 if len(message.text) > 15:
#                     await bot.send_message(message.from_user.id, "–Ω–µ –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤")
#                 elif '@' in message.text or '/' in message.text:
#                     await bot.send_message(message.from_user.id, "–≤—ã –≤–≤–µ–ª–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Å–∏–º–≤–æ–ª")
#                 else:
#                     db.set_nickname(message.from_user.id, message.text)
#                     db.set_signup(message.from_user.id, "done")
#                     await bot.send_message(message.from_user.id, "–≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=nav.mainMenu)
#             else:
#                 await bot.send_message(message.from_user.id, "–ß—Ç–æ?")
